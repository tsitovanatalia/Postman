{
	"info": {
		"_postman_id": "b83cd035-21d9-4370-9b56-a49640d430ad",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25563022"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "162.55.220.72:5005/first",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" // 1. Отправить запрос\r",
							" // 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							" // 3. Спарсить response body в json\r",
							" var respData = pm.response.json();\r",
							"\r",
							"  // 4. Проверить, что name в ответе равно name c request. Name вбить руками\r",
							"pm.test(\"Проверить, что name в ответе = name c request\", function () {\r",
							"    pm.expect(respData.name).to.eql(\"Natalia\");\r",
							"});\r",
							"\r",
							" // 5. Проверить, что age в ответе равно age c request. Age вбить руками\r",
							"pm.test(\"Проверить, что age в ответе = age c request\", function () {\r",
							"    pm.expect(respData.age).to.eql(\"32\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary c request. Salary вбить руками\r",
							"pm.test(\"Проверить, что salary в ответе равно salary c request\", function () {\r",
							"    pm.expect(respData.salary).to.eql(500);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request\r",
							"var req = request.data;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name c request. \r",
							"pm.test(\"Проверить, что name в ответе = name c request\", function () {\r",
							"    pm.expect(respData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							" // 9. Проверить, что age в ответе равно age c request. \r",
							"pm.test(\"Проверить, что age в ответе = age c request\", function () {\r",
							"    pm.expect(respData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							" // 10. Проверить, что salary в ответе равно salary c request. \r",
							"pm.test(\"Проверить, что salary в ответе = salary c request\", function () {\r",
							"    pm.expect(respData.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из  response\r",
							"    console.log(\"family = \", respData.family);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"Проверить что u_salary_1_5_year в ответе = salary*4\", function () {\r",
							"    pm.expect((+req.salary)*4).to.eql(respData.family.u_salary_1_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Natalia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "162.55.220.72:5005/user_info_3",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1 Отправить запрос\r",
							"//2 Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});    \r",
							"\r",
							"//3 Спарсить response body в json\r",
							"var resp = pm.response.json();\r",
							"var resp_Name = resp.name;\r",
							"var resp_Age = resp.age;\r",
							"var resp_Salary = resp.salary;\r",
							"\r",
							"//4 Спарсить request\r",
							"var req_url= pm.request.url.query.toObject();\r",
							"console.log(req_url)\r",
							"\r",
							"var req_Name = req_url.name;\r",
							"var req_Age = req_url.age;\r",
							"var req_Salary = req_url.salary;\r",
							"var dog_info = resp.family.pets.dog;\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Проверить, что name в ответе = name s request\", function () {\r",
							"    pm.expect(resp_Name).to.eql(req_Name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Проверить, что age в ответе = age s request\", function () {\r",
							"    pm.expect(resp_Age).to.eql(req_Age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что salary в ответе =о salary s request\", function () {\r",
							"   pm.expect(resp_Salary).to.eql(+req_Salary);\r",
							" });   \r",
							"\r",
							"//8. Вывести в консоль параметр family из response\r",
							"console.log(\"Family = \", resp.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"Проверить, что у параметра dog есть параметры name\", function () {\r",
							"pm.expect(dog_info).to.have.property('name');\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Проверить, что у параметра dog есть параметры age.\", function () {\r",
							"    pm.expect(dog_info).to.have.property('age');\r",
							" });   \r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Проверить, что параметр name имеет значение Luky\", function () {\r",
							"    pm.expect(dog_info).to.have.property('name', 'Luky');\r",
							" });\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Параметр age имеет значение 4\", function () {\r",
							"    pm.expect(dog_info).to.have.property('age', 4);\r",
							" });\r",
							"\t\t"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "162.55.220.72:5005/object_info_3?name=Natalia&age=32&salary=500",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Natalia"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"//3 Спарсить response body в json\r",
							"var resp = pm.response.json();\r",
							"\r",
							"var resp_Name = resp.name;\r",
							"var resp_Age = resp.age;\r",
							"var resp_Salary = resp.salary;\r",
							"\r",
							"//4 Спарсить request\r",
							"var req_url= pm.request.url.query.toObject();\r",
							"console.log(req_url)\r",
							"\r",
							"var req_Name = req_url.name;\r",
							"var req_Age = req_url.age;\r",
							"var req_Salary = req_url.salary;\r",
							"\r",
							"//5. Проверить, что name в ответе равно name с request (name забрать из request.)\r",
							"pm.test(\"Name в ответе равно name с request (name забрать из request.)\", function(){\r",
							"    pm.expect(resp_Name).to.eql(req_Name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age в ответе равно age из request (age забрать из request.)\", function(){\r",
							"   pm.expect(resp_Age).to.eql(+req_Age);\r",
							"});  \r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Salary = \", req_Salary)\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Salary = \", resp_Salary)\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Salary_0 = \"+resp_Salary[0])\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary_1 = \"+resp_Salary[1])\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary_2 = \"+resp_Salary[2])\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"0-й элемент параметра salary равен salary из request (salary забрать из request\", function(){\r",
							"    pm.expect(resp_Salary[0]).to.eql(+req_Salary)\r",
							" });    \r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\", function(){\r",
							"     pm.expect(+resp_Salary[1]).to.eql(req_Salary * 2);\r",
							"  });   \r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\", function(){\r",
							"    pm.expect(+resp_Salary[2]).to.eql(req_Salary * 3);\r",
							"  }); \r",
							"//15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\");\r",
							"\r",
							"//16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\");\r",
							"\r",
							"//17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\");\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", req_Name);\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", req_Age);\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", req_Salary);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"//i>3 = i<resp_Salary.length\r",
							"for(var i = 0; i<3; i++ ){\r",
							"  console.log(\"Key \" +i, \"Value \" +resp_Salary[i])\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "162.55.220.72:5005/object_info_4?name=Natalia&age=32&salary=500",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Natalia"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});   \r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"let resp_salary_after_1_5_year = resp[\"qa_salary_after_1.5_year\"];\r",
							"let resp_salary_after_12_months = resp.qa_salary_after_12_months;\r",
							"let resp_salary_after_3_5_years = resp[\"qa_salary_after_3.5_years\"];\r",
							"let resp_salary_after_6_months = resp.qa_salary_after_6_months;\r",
							"let resp_start_qa_salary = resp.start_qa_salary;\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data\r",
							"let req_Salary = req.salary\r",
							"let req_age = req.qge\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Проверить, что json response имеет параметр start_qa_salary \", function () { \r",
							"    pm.expect(resp).to.have.property('start_qa_salary');\r",
							" });\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_6_months \", function () { \r",
							"    pm.expect(resp).to.have.property('qa_salary_after_6_months');\r",
							" });\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_12_months \", function () { \r",
							"    pm.expect(resp).to.have.property('qa_salary_after_12_months');\r",
							" });\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_1.5_year\", function () { \r",
							"    pm.expect(resp).to.have.property('qa_salary_after_1.5_year');\r",
							" });\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_3.5_year\", function () { \r",
							"    pm.expect(resp).to.have.property('qa_salary_after_3.5_years');\r",
							" });\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Проверить, что json response имеет параметр person\", function () { \r",
							"    pm.expect(resp).to.have.property('person');\r",
							" });\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр start_qa_salary = salary из request (salary забрать из request\", function () {\r",
							"    pm.expect(resp_start_qa_salary).to.eql(+req_Salary);\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_6_months = salary*2 из request\", function () {\r",
							"    pm.expect(resp_salary_after_6_months).to.eql(+req_Salary * 2);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_12_months = salary*2.7 из request\", function () {\r",
							"    pm.expect(resp_salary_after_12_months).to.eql(+req_Salary * 2.7);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_1.5_year = salary*3.3 из request\", function () {\r",
							"    pm.expect(resp_salary_after_1_5_year).to.eql(+req_Salary * 3.3);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_3.5_year = salary*3.8 из request\", function () {\r",
							"    pm.expect(resp_salary_after_3_5_years).to.eql(+req_Salary * 3.8);\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"В параметре person, 1-й элемент из u_name = salary из request\", function () {\r",
							"    pm.expect(resp.person.u_name [1]).to.eql(+req_Salary);\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Параметр u_age = age из request \", function () {\r",
							"    pm.expect(resp.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Параметр u_salary_5_years = salary*4.2 из request\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(+req_Salary * 4.2);\r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var respArrName = resp.person.u_name;\r",
							"\r",
							"for(i in resp.person) {\r",
							"    if (Array.isArray(resp.person[i])) {\r",
							"        resp.person[i].forEach(value => console.log(value));\r",
							"} else {\r",
							"    console.log(`${i}: ${resp.person[i]}`);\r",
							"  }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}