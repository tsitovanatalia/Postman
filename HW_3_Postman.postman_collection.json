{
	"info": {
		"_postman_id": "0bc27cde-471a-4bf0-8223-72f7dd21342f",
		"name": "HW_3_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25563022"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) необходимо залогиниться\r",
							"//POST\r",
							"//http://162.55.220.72:5005/login\r",
							"//login : str (кроме /)\r",
							"//password : str\r",
							"\r",
							"//Приходящий токен необходимо передать во все остальные запросы.\r",
							"//дальше все запросы требуют наличие токена.\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let resp_token = resp.token;\r",
							"pm.environment.set(\"token\", resp_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "469",
							"type": "string"
						},
						{
							"key": "username",
							"value": "Natalia",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//req. (RAW JSON) POST\r",
							"//age: int\r",
							"//salary: int\r",
							"//name: str\r",
							"//auth_token\r",
							"//resp.\r",
							"//{'start_qa_salary':salary,\r",
							" //'qa_salary_after_6_months': salary * 2,\r",
							" //'qa_salary_after_12_months': salary * 2.9,\r",
							" //'person': {'u_name':[user_name, salary, age],\r",
							"     //                             'u_age':age,\r",
							"        //                           'u_salary_1.5_year': salary * 4}}\r",
							"\r",
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//2) Проверка структуры json в ответе.\r",
							"    let resp = pm.response.json();\r",
							"const sсhema = \r",
							"{ \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\"type\": \"integer\"},\r",
							"        \"u_name\": {\"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\"type\": \"string\"},\r",
							"            {\"type\": \"integer\"},\r",
							"            {\"type\": \"integer\"} ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
							"      },\r",
							"      \"required\": [\"u_age\", \"u_name\", \"u_salary_1_5_year\"]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\"type\": \"number\"},\r",
							"    \"qa_salary_after_6_months\": {\"type\": \"integer\"},\r",
							"    \"start_qa_salary\": {\"type\": \"integer\"}\r",
							"  },\r",
							"  \"required\": [\"person\", \"qa_salary_after_12_months\", \"qa_salary_after_6_months\", \"start_qa_salary\"]\r",
							"};\r",
							"var schema = {\r",
							"    \"items\": {\"type\": \"boolean\"}\r",
							"};\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"let resp_salary_x2 = resp.qa_salary_after_6_months;\r",
							"\r",
							"pm.test(\"Коэффициенты умножения salary х2\", function () {\r",
							"    pm.expect(resp_salary_x2).to.eql(resp.person.u_name[1]*2);\r",
							"});\r",
							"\r",
							"let resp_salary_x2_9 = resp.qa_salary_after_12_months;\r",
							"pm.test(\"Коэффициенты умножения salary х 2_9\", function () {\r",
							"    pm.expect(resp_salary_x2_9).to.eql(resp.person.u_name[1]*2.9);\r",
							"});\r",
							"\r",
							"let resp_salary_x4 = resp.person.u_salary_1_5_year;\r",
							"\r",
							"pm.test(\"Коэффициенты умножения salary х 4\", function () {\r",
							"    pm.expect(resp_salary_x4).to.eql(resp.person.u_name[1]*4);\r",
							"});\r",
							"\r",
							"//4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"pm.environment.set('u_salary', resp_salary_x4)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"age\" : 32,\r\n\"salary\" : 500,\r\n\"name\" : \"Natalia\",\r\n\"auth_token\" : \"{{token}}\"\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//req.\r",
							"//POST\r",
							"//age: int\r",
							"//salary: int\r",
							"//name: str\r",
							"//auth_token\r",
							"\r",
							"//Resp.\r",
							"//{'name':name,\r",
							"//  'age': int(age),\r",
							"//  'salary': [salary, str(salary*2), str(salary*3)]}\r",
							"\r",
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							" let resp = pm.response.json();\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\"type\": \"integer\"},\r",
							"    \"name\": {\"type\": \"string\"},\r",
							"    \"salary\": {\"type\": \"array\",\"items\": [\r",
							"        {\"type\": \"integer\"},\r",
							"        {\"type\": \"string\"},\r",
							"        {\"type\": \"string\"} ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\"age\", \"name\", \"salary\"]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"let resp_salary = resp.salary[0];\r",
							"let resp_salary_x2 = resp.salary[1];\r",
							"let resp_salary_x3 = resp.salary[2];\r",
							"\r",
							"pm.test(\"salary х2\", function () {\r",
							"    pm.expect(+resp_salary_x2).to.eql(resp.salary[0]*2);\r",
							"});\r",
							"\r",
							"pm.test(\"salary х 3\", function () {\r",
							"    pm.expect(+resp_salary_x3).to.eql(resp.salary[0]*3);\r",
							"});\r",
							"\r",
							"//4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"2-й элемент массива salary больше 1-го и 0-го\", function () {\r",
							"    pm.expect(+resp_salary_x3).to.greaterThan(+resp_salary)\r",
							"    pm.expect(+resp_salary_x3).to.greaterThan(+resp_salary_x2)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Natalia",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//req. POST\r",
							"//age: int\r",
							"//weight: int\r",
							"//name: str\r",
							"//auth_token\r",
							"\r",
							"//Resp.\r",
							"//{'name': name,\r",
							" //'age': age,\r",
							" //'daily_food':weight * 0.012,\r",
							" //'daily_sleep': weight * 2.5}\r",
							"\r",
							" //Тесты:\r",
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//2) Проверка структуры json в ответе.\r",
							"var schema ={\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\"type\": \"integer\"},\r",
							"    \"daily_food\": {\"type\": \"number\"},\r",
							"    \"daily_sleep\": {\"type\": \"number\"},\r",
							"    \"name\": {\"type\": \"string\"}\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"let req = request.data\r",
							"let resp = pm.response.json();\r",
							"\r",
							"pm.test(\"Коэффициенты умножения weight на 0.012\", function () {\r",
							"    pm.expect(+resp.daily_food).to.eql(+req.weight *0.012);\r",
							"});\r",
							"pm.test(\"Коэффициенты умножения weight на 2.5\", function () {\r",
							"    pm.expect(+resp.daily_sleep).to.eql(+req.weight *2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "55",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Natalia",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//req. POST\r",
							"//age: int\r",
							"//salary: int\r",
							"//name: str\r",
							"//auth_token\r",
							"\r",
							"//Resp.\r",
							"//{'name': name,\r",
							"// 'age':age,\r",
							"// 'salary': salary,\r",
							"// 'family':{'children':[['Alex', 24],['Kate', 12]],\r",
							"// 'u_salary_1.5_year': salary * 4}\r",
							"//  }\r",
							"\r",
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var schema ={\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\"type\": \"string\"},\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\"type\": \"string\"},\r",
							"                {\"type\": \"integer\"}]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\"type\": \"string\"},\r",
							"                {\"type\": \"integer\"} ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": { \"type\": \"integer\"}\r",
							"      },\r",
							"      \"required\": [\"children\", \"u_salary_1_5_year\"]\r",
							"    },\r",
							"    \"name\": {\"type\": \"string\"},\r",
							"    \"salary\": {\"type\": \"integer\"}\r",
							"  },\r",
							"  \"required\": [\"age\", \"family\", \"name\", \"salary\"]\r",
							"};\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"//3) Проверить, что занчение поля name = значению переменной name из окружения\r",
							"let resp = pm.response.json();\r",
							"pm.test(\"Значение поля name = значению переменной из окружения\", function () {\r",
							"    pm.expect(pm.environment.get(\"name\")).to.equal(resp.name);\r",
							"});\r",
							"\r",
							"//4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"let req = request.data\r",
							"pm.test(\"Значение поля age в ответе  = age в запросе\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Natalia",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//req. POST\r",
							"//auth_token\r",
							"//Resp. Передаётся список массив объектов.\r",
							"//[\r",
							"//{\"Cur_Abbreviation\": str,\r",
							"// \"Cur_ID\": int,\r",
							"// \"Cur_Name\": str}\r",
							"//…\r",
							"//{\"Cur_Abbreviation\": str,\r",
							"// \"Cur_ID\": int,\r",
							" //\"Cur_Name\": str\r",
							"//}]\r",
							"\r",
							"//1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"let resp_data = pm.response.json();\r",
							"object = resp_data[_.random(resp_data.length)]\r",
							"\r",
							"console.log(\"Данные\", object.Cur_ID)\r",
							"\r",
							"//В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"pm.environment.set('Cur_ID', object.Cur_ID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//req.\r",
							"//POST\r",
							"//auth_token\r",
							"//curr_code: int\r",
							"\r",
							"//Resp.{\r",
							"//    \"Cur_Abbreviation\": str\r",
							"//    \"Cur_ID\": int,\r",
							"//    \"Cur_Name\": str,\r",
							"//    \"Cur_OfficialRate\": float,\r",
							"//    \"Cur_Scale\": int,\r",
							"//    \"Date\": str \r",
							"//    }\r",
							"\r",
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//2) Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\"type\": \"string\"},\r",
							"    \"Cur_ID\": {\"type\": \"integer\"},\r",
							"    \"Cur_Name\": {\"type\": \"string\"},\r",
							"    \"Cur_OfficialRate\": {\"type\": \"number\"},\r",
							"    \"Cur_Scale\": {\"type\": \"integer\"},\r",
							"    \"Date\": {\"type\": \"string\"}\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/curr_byn",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}